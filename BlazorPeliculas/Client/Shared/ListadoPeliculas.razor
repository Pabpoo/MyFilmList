@inject IJSRuntime js
@inject IRepository repositorio
@inject SweetAlertService swal

<div style="display:flex; flex-wrap:wrap; align-items:center; @(HasOverflow ? "overflow-x: auto;" : "")">
    <ListadoGenerico Listado="Peliculas">
        <Data Context="pelicula">
            @* Con key le decimos que use el id de la pelicual para que diferencie las peliculas *@
            <PeliculaIndividual Pelicula="pelicula"
                                EliminarPelicula="EliminarPelicula" @key="pelicula.Id"
                                />
        </Data>
    </ListadoGenerico>
</div>

@code {
    [Parameter]
    public List<PeliculaGrupoDTO>? Peliculas { get; set; }
    [Parameter]
    public bool HasOverflow { get; set; } = false;

    private async Task EliminarPelicula(PeliculaGrupoDTO pelicula)
    {
        // Podemos crear una clase para el código javascript e ir llamándola
        var confirmado = await js.Confirm($"¿Desea borrar la película {pelicula.Titulo}?");

        if (confirmado)
        {
            var responseHTTP = await repositorio.Delete($"api/peliculas/{pelicula.Id}");

            if (responseHTTP.Error)
            {
                var mensajeError = await responseHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else
            {
                Peliculas!.Remove(pelicula);
            }
        }
    }
}
