@page "/actores"
@using Microsoft.AspNetCore.Authorization
@inject IJSRuntime js
@inject IRepository repositorio
@inject NavigationManager navigationManager
@inject SweetAlertService swal
@attribute [Authorize(Roles = "admin")]

<h3>Indice Actores</h3>



<input type="text" @bind="textoBusqueda" placeholder="Buscar por nombre..." />
<button type="button" class="btn btn-primary" @onclick="Buscar">Filtrar</button>
<button type="button" class="btn btn-danger" @onclick="Limpiar">Limpiar</button>

<Paginacion PaginaActual="paginaActual"
	PaginasTotales="paginasTotales"
	PaginaSeleccionada="PaginaSeleccionada"
	></Paginacion>

<ListadoGenerico Listado="Actores">
	<DataComplete>
		<table class="table table-striped">
			<thead>
				<tr>
					<th>
						<div class="d-flex justify-content-center align-items-center h-100">
							<a href="actores/crear" class="btn btn-info">Crear actor</a>
						</div>
					</th>
					<th>Actor/Actriz</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in Actores)
				{
					<tr>
						<td style="width:160px;">
							<a href="actores/editar/@item.Id" class="btn btn-success">Editar</a>
							<button class="btn btn-danger" @onclick=@(() => Borrar(item))>Borrar</button>
						</td>
						<td>
							<img src="@item.Foto" alt="@item.Nombre" style="width:30px; height:40px;">
							@item.Nombre
						</td>
					</tr>
				}
			</tbody>
		</table>
	</DataComplete>
</ListadoGenerico>

@code {
	public List<Actor> Actores { get; set; }
	private int paginaActual = 1;
	private int paginasTotales;
	private string textoBusqueda;

	protected async override Task OnInitializedAsync()
	{
		await Cargar();
	}

	private async Task PaginaSeleccionada (int pagina)
	{
		paginaActual = pagina;
		await Cargar(pagina);
	}

	private async Task Cargar( int pagina = 1)
	{
		var respuestaHTTP = await repositorio.Get<List<Actor>>($"api/actores?pagina={pagina}");
		Actores = respuestaHTTP.Response;
		paginasTotales = int.Parse(respuestaHTTP.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
	}

	private async Task Buscar()
	{
		if (string.IsNullOrEmpty(textoBusqueda))
		{
			await Cargar();
		}
		else
		{
			var respuestaHTTP = await repositorio.Get<List<Actor>>($"api/actores/buscar/{textoBusqueda}");
			Actores = respuestaHTTP.Response;
		}
	}

	private async Task Limpiar()
	{
		textoBusqueda = string.Empty;
		await Buscar();
	}

	private async Task Borrar(Actor actor)
	{
		var confirmado = await js.Confirm($"¿Desea borrar al actor {actor.Nombre}?");

		if (confirmado)
		{
			var responseHTTP = await repositorio.Delete($"api/actores/{actor.Id}");

			if (responseHTTP.Error)
			{
				if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
				{
					navigationManager.NavigateTo("actores");
				}
				else
				{
					var mensajeError = await responseHTTP.ObtenerMensajeError();
					await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
				}
			}
			else
			{
				await Cargar();
			}
		}
	}
}
