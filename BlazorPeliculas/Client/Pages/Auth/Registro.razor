@page "/Registro"
@using BlazorPeliculas.Client.Auth
@using System.Text.Json
@using System.Net
@inject IRepository repositorio
@inject SweetAlertService swal
@inject ILoginService loginService
@inject NavigationManager navigationManager

<h3>Registro</h3>

<EditForm Model="userInfo" OnValidSubmit="CrearUsuario">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Email:</label>
        <div>
            <InputText class="form-control" @bind-Value="userInfo.Email" />
            <ValidationMessage For=@(() => userInfo.Email) />
        </div>
    </div>
    
    <div class="mb-3">
        <label>Password:</label>
        <div>
            <InputText type="password" class="form-control" @bind-Value="userInfo.Password" />
            <ValidationMessage For=@(() => userInfo.Password) />
            <p class="text-muted small">La contraseña debe tener al menos 6 caracteres, una mayúscula, un número y un carácter especial.</p>
        </div>
    </div>

    <div class="mb-3">
        <label>Confirmar Password:</label>
        <div>
            <InputText type="password" class="form-control" @bind-Value="userInfo.ConfirmPassword" />
            <ValidationMessage For=@(() => userInfo.ConfirmPassword) />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Registrar</button>
</EditForm>

@code {
    private UserInfoDTO userInfo = new UserInfoDTO();

    private async Task CrearUsuario()
    {
        var respuestaHTTP = await repositorio.Post<UserInfoDTO, UserTokenDTO>("api/cuentas/crear", userInfo);

        if (respuestaHTTP.Error)
        {
            string mensajeError;
            if (respuestaHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.BadRequest)
            {
                mensajeError = await ExtractDescriptionFromBadRequest(respuestaHTTP.HttpResponseMessage);
            }
            else
            {
                mensajeError = await respuestaHTTP.ObtenerMensajeError();
            }

            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            navigationManager.NavigateTo("/Login");
        }
    }

    private async Task<string> ExtractDescriptionFromBadRequest(HttpResponseMessage response)
    {
        var content = await response.Content.ReadAsStringAsync();
        try
        {
            using var doc = JsonDocument.Parse(content);
            if (doc.RootElement.TryGetProperty("description", out var description))
            {
                return description.GetString();
            }
        }
        catch (JsonException)
        {
            await swal.FireAsync("Error", "Error al procesar la respuesta del servidor", SweetAlertIcon.Error);
        }

        return "Error desconocido";
    }
}
