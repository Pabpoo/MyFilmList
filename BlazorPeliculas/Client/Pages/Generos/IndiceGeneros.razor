@page "/generos"
@using Microsoft.AspNetCore.Authorization
@inject IJSRuntime js
@inject IRepository repositorio
@inject NavigationManager navigationManager
@inject SweetAlertService swal
@* De esta forma protegemos los componentes ruteables, solo es posible hacerlo con los ruteables *@
@attribute [Authorize(Roles = "admin")]

<h3>Géneros</h3>

<div>
	<a class="btn btn-info" href="generos/crear">Agregar Género</a>
</div>

<ListadoGenerico Listado="Generos">
	<DataComplete>
		<table class="table table-striped">
			<thead>
				<tr>
					<th></th>
					<th>Nombre</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in Generos)
				{
					<tr>
						<td>
							<a href="/generos/editar/@item.Id" class="btn btn-success">Editar</a>
							<button class="btn btn-danger" @onclick=@(() => Borrar(item))>Borrar</button>
						</td>
						<td>
							@item.Nombre
						</td>
					</tr>
				}
			</tbody>
		</table>
	</DataComplete>
</ListadoGenerico>

@code {
	public List<Genero> Generos { get; set; }

	protected async override Task OnInitializedAsync()
	{
		await Cargar();
	}

	private async Task Cargar()
	{
		var respuestaHTTP = await repositorio.Get<List<Genero>>("api/generos");
		Generos = respuestaHTTP.Response;
	}

	private async Task Borrar(Genero genero)
	{
		var confirmado = await js.Confirm($"¿Desea borrar el género {genero.Nombre}?");

		if (confirmado)
		{
			var responseHTTP = await repositorio.Delete($"api/generos/{genero.Id}");

			if (responseHTTP.Error)
			{
				if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
				{
					navigationManager.NavigateTo("/");
				}
				else
				{
					var mensajeError = await responseHTTP.ObtenerMensajeError();
					await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
				}
			}
			else
			{
				await Cargar();
			}
		}
	}
}
