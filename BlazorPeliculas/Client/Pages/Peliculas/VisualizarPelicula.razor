@* Para definir parametros de ruta hay que entre llaves poner la variable y restringir el tipo de dato con : *@
@page "/peliculas/{PeliculaId:int}"
@* No hay que colorcar restricción de ruta a los strings *@
@page "/peliculas/{PeliculaId:int}/{NombrePelicula}"

@inject IRepository repositorio
@inject SweetAlertService swal
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@if(modelo is null)
{
    <p>cargando...</p>
}
else
{
    <h2>@modelo.Pelicula.Titulo (@modelo.Pelicula.FechaLanzamiento.Value.ToString("yyyy"))</h2>

    foreach(var genero in modelo.Generos)
    {
        <a class="me-2 badge bg-primary rounded-pill text-decoration-none" href="peliculas/buscar?generoid=@genero.Id">@genero.Nombre</a>
    }
    <span>
        | @modelo.Pelicula.FechaLanzamiento.Value.ToString("dd MMM yyyy")
        | Promedio: @modelo.PromedioVotos.ToString("0.#")/5
        | Tu voto: <Rating MaximaPuntuacion="5" PuntuacionSeleccionada="modelo.VotoUsuario" OnRating="OnRating" Disabled="!isAuthenticated"></Rating>
        <div style="@(!isAuthenticated ? "display:none;" : "display:inline;")">
            <i id="btn-agregar-favorita" role="button" class="ms-2 me-1 bi bi-heart@(esFavorita ? "-fill" : "")" style="@(esFavorita ? "color: deeppink;" : "")"
                @onclick="AgregarOQuitarFavoritas" data-bs-trigger="hover" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="@(esFavorita ? "Eliminar de" : "Agregar a") 'Favoritas'">
            </i>

            <i id="btn-agregar-vistas" role="button" class="ms-1 me-2 bi bi-eye@(vista ? "-fill" : "")" style="@(vista ? "color: darkblue;" : "")"
                @onclick="AgregarOQuitarVistas" data-bs-trigger="hover" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="@(vista ? "Eliminar de" : "Agregar a") 'Vistas'">
            </i>

            <i id="btn-agregar-por-ver" role="button" class="mx-1 bi bi-clock@(porVer ? "-fill" : "")" style="@(porVer ? "color: black;" : "")"
                @onclick="AgregarOQuitarPorVer" data-bs-trigger="hover" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="@(porVer ? "Eliminar de" : "Agregar a") 'Por Ver'">
            </i>
        </div>
    </span>

    <div class="d-flex mt-2">
        <span style="display: inline-block;" class="me-2">
            <img src="@modelo.Pelicula.Poster" style="width: 225px; height: 315px" />
        </span>
        @if (modelo.Pelicula.Trailer != "")
        {
            <iframe width="560" height="315" src="https://www.youtube.com/embed/@modelo.Pelicula.Trailer" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>   
        }
    </div>

    <div class="mt-2">
        <h3>Resumen</h3>
        <div class="resumen-texto">
            <MostrarMarkdown ContenidoMarkdown="@modelo.Pelicula.Resumen"></MostrarMarkdown>
        </div>
    </div>

    <div class="mt-2">
        <h3>Actores</h3>
        <div class="d-flex flex-column">
            @foreach (var actor in modelo.Actor)
            {
                <div class="mb-2">
                    <a href="/actores/detalles/@actor.Id" class="text-decoration-none text-dark">
                        <img style="width:50px;" src="@actor.Foto" />
                        <span class="d-inline-block fw-bolder link-hover" style="width:200px;">@actor.Nombre</span>
                    </a>
                    <span class="d-inline-block me-3">Interpretando a:</span>
                    <span class="fw-bold">@actor.Personaje</span>
                </div>               
            }
        </div>
    </div>

    <script type="text/javascript">
        $(function () {
            $("[data-bs-toggle='tooltip']").tooltip();
        });
    </script>
}

@code {
    [Parameter] public int PeliculaId { get; set; }
    [Parameter] public string NombrePelicula { get; set; } = null!;
    private PeliculaVisualizarDTO? modelo;
    private bool esFavorita;
    private bool porVer;
    private bool vista;
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity.IsAuthenticated;

        var respuestaHTTP = await repositorio.Get<PeliculaVisualizarDTO>($"api/peliculas/{PeliculaId}");

        var añadidaAFavorita = await repositorio.Get<bool>($"api/listaspeliculas/esfavorita/{PeliculaId}");
        var añadidaAPorVer = await repositorio.Get<bool>($"api/listaspeliculas/esporver/{PeliculaId}");
        var añadidaAVista = await repositorio.Get<bool>($"api/listaspeliculas/esvista/{PeliculaId}");

        if (respuestaHTTP.Error)
        {
            var mensajeError = await respuestaHTTP.ObtenerMensajeError();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            modelo = respuestaHTTP.Response;
        }
        esFavorita = añadidaAFavorita.Response;
        porVer = añadidaAPorVer.Response;
        vista = añadidaAVista.Response;
    }

    private async Task OnRating(int votoSeleccionado)
    {
        modelo.VotoUsuario = votoSeleccionado;
        var votoPeliculaDTO = new VotoPeliculaDTO() { PeliculaId = PeliculaId, Voto = votoSeleccionado };
        var respuestaHTTP = await repositorio.Post("api/votos", votoPeliculaDTO);

        if (respuestaHTTP.Error)
        {
            var mensajeError = await respuestaHTTP.ObtenerMensajeError();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            StateHasChanged();
            await swal.FireAsync("Exito", "Su voto ha sido registrado", SweetAlertIcon.Success);
        }

    }

    private async Task AgregarOQuitarFavoritas()
    {

        if (!esFavorita)
        {
            var peliculaFavoritaDTO = new PeliculasListasDTO { PeliculaId = modelo.Pelicula.Id };
            var respuestaHTTP = await repositorio.Post("api/listaspeliculas/favoritas", peliculaFavoritaDTO);

            if (respuestaHTTP.Error)
            {
                var mensajeError = await respuestaHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else
            {
                esFavorita = true;
                StateHasChanged();
                await swal.FireAsync("Exito", "La película ha sido agregada a tus favoritas", SweetAlertIcon.Success);
            }
        }
        else
        {
            var respuestaHTTP = await repositorio.Delete($"api/listaspeliculas/eliminardefavoritas/{modelo.Pelicula.Id}");

            if (respuestaHTTP.Error)
            {
                var mensajeError = await respuestaHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else
            {
                esFavorita = false;
                StateHasChanged();
                await swal.FireAsync("Exito", "La película ha sido eliminada de tus favoritas", SweetAlertIcon.Success);
            }
        }
        await JSRuntime.InvokeVoidAsync("updateTooltips", new object[]{});
        StateHasChanged();
    }

    private async Task AgregarOQuitarPorVer()
    {
        if (!porVer)
        {
            var peliculaListaDTO = new PeliculasListasDTO { PeliculaId = modelo.Pelicula.Id };
            var respuestaHTTP = await repositorio.Post("api/listaspeliculas/porver", peliculaListaDTO);

            if (respuestaHTTP.Error)
            {
                var mensajeError = await respuestaHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else
            {
                porVer = true;
                StateHasChanged();
                await swal.FireAsync("Exito", "La película ha sido agregada a tu lista 'Por Ver'", SweetAlertIcon.Success);
            }
        }
        else{
            var respuestaHTTP = await repositorio.Delete($"api/listaspeliculas/eliminardeporver/{modelo.Pelicula.Id}");

            if (respuestaHTTP.Error)
            {
                var mensajeError = await respuestaHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else
            {
                porVer = false;
                StateHasChanged();
                await swal.FireAsync("Exito", "La película ha sido eliminada de tu lista 'Por Ver'", SweetAlertIcon.Success);
            }
        }
        await JSRuntime.InvokeVoidAsync("updateTooltips", new object[] { });
        StateHasChanged();
    }

    private async Task AgregarOQuitarVistas()
    {
        if (!vista)
        {
            var peliculaListaDTO = new PeliculasListasDTO { PeliculaId = modelo.Pelicula.Id };
            var respuestaHTTP = await repositorio.Post("api/listaspeliculas/vistas", peliculaListaDTO);

            if (respuestaHTTP.Error)
            {
                var mensajeError = await respuestaHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else
            {
                vista = true;
                StateHasChanged();
                await swal.FireAsync("Exito", "La película ha sido agregada a tu lista 'Vistas'", SweetAlertIcon.Success);
            }
        }
        else
        {
            var respuestaHTTP = await repositorio.Delete($"api/listaspeliculas/eliminardevistas/{modelo.Pelicula.Id}");

            if (respuestaHTTP.Error)
            {
                var mensajeError = await respuestaHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else
            {
                vista = false;
                StateHasChanged();
                await swal.FireAsync("Exito", "La película ha sido eliminada de tu lista 'Vistas'", SweetAlertIcon.Success);
            }
        }
        await JSRuntime.InvokeVoidAsync("updateTooltips", new object[] { });
        StateHasChanged();
    }

}
